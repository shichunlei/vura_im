plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace "com.example.app.im"
    compileSdk 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.app.im"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"
    }

    signingConfigs {
        release {
            storeFile file('keystore/jqdl.jks')
            storePassword '123456'
            keyAlias = 'jqdl'
            keyPassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
        debug {
            storeFile file('keystore/jqdl.jks')
            storePassword '123456'
            keyAlias = 'jqdl'
            keyPassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            ndk {
                // 这里其实我觉可以直接是用"armeabi-v7a"，但国内几个大哥之前使用的都是"armeabi"
                abiFilters "arm64-v8a"
                // abiFilters "armeabi-v7a"
                // abiFilters "armeabi-v7a", "arm64-v8a"
            }

            // Enables code shrinking, obfuscation, and optimization for only your project's release build type.
            minifyEnabled true
            // Enables resource shrinking, which is performed by the Android Gradle plugin.
            shrinkResources true
            // Includes the default ProGuard rules files that are packaged with the Android Gradle plugin. To learn more, go to the section about R8 configuration files.
            signingConfig signingConfigs.release
        }

        debug {
            ndk {
                //这里要加上，否则debug包会出问题,后面三个为可选，x86建议加上不然部分模拟器会报错
                abiFilters "armeabi-v7a", "arm64-v8a"
            }

            // Enables code shrinking, obfuscation, and optimization for only your project's release build type.
            minifyEnabled false
            // Enables resource shrinking, which is performed by the Android Gradle plugin.
            shrinkResources false
            // Includes the default ProGuard rules files that are packaged with the Android Gradle plugin. To learn more, go to the section about R8 configuration files.
            signingConfig signingConfigs.debug
        }
    }
    android.applicationVariants.configureEach { variant ->
        variant.outputs.configureEach {
            outputFileName = "im_${versionName}_${buildType.name}_${buildTime()}.apk"
        }
    }
}

static def buildTime() {
    return new Date().format("MMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

flutter {
    source = "../.."
}
